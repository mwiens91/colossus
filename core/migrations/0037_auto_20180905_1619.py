# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-09-05 23:19
from __future__ import unicode_literals

import core.helpers
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0036_auto_20180803_1257'),
    ]

    operations = [
        migrations.AddField(
            model_name='tenxlibraryconstructioninformation',
            name='chip_lot_number',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Chip lot number'),
        ),
        migrations.AddField(
            model_name='tenxlibraryconstructioninformation',
            name='concentration',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Concentration (in nanomolar)'),
        ),
        migrations.AddField(
            model_name='tenxlibraryconstructioninformation',
            name='index_used',
            field=models.CharField(blank=True, choices=[(b'SI_GA-A1,GGTTTACT,CTAAACGG,TCGGCGTC,AACCGTAA', b'SI-GA_A1'), (b'SI-GA-A2,TTTCATGA,ACGTCCCT,CGCATGTG,GAAGGAAC', b'SI-GA-A2'), (b'SI-GA-A3,CAGTACTG,AGTAGTCT,GCAGTAGA,TTCCCGAC', b'SI-GA-A3'), (b'SI-GA-A4,TATGATTC,CCCACAGT,ATGCTGAA,GGATGCCG', b'SI-GA-A4'), (b'SI-GA-A5,CTAGGTGA,TCGTTCAG,AGCCAATT,GATACGCC', b'SI-GA-A5'), (b'SI-GA-A6,CGCTATGT,GCTGTCCA,TTGAGATC,AAACCGAG', b'SI-GA-A6'), (b'SI-GA-A7,ACAGAGGT,TATAGTTG,CGGTCCCA,GTCCTAAC', b'SI-GA-A7'), (b'SI-GA-A8,GCATCTCC,TGTAAGGT,CTGCGATG,AACGTCAA', b'SI-GA-A8'), (b'SI-GA-A9,TCTTAAAG,CGAGGCTC,GTCCTTCT,AAGACGGA', b'SI-GA-A9'), (b'SI-GA-A10,GAAACCCT,TTTCTGTC,CCGTGTGA,AGCGAAAG', b'SI-GA-A10'), (b'SI-GA-A11,GTCCGGTC,AAGATCAT,CCTGAAGG,TGATCTCA', b'SI-GA-A11'), (b'SI-GA-A12,AGTGGAAC,GTCTCCTT,TCACATCA,CAGATGGG', b'SI-GA-A12'), (b'SI-GA-B1,GTAATCTT,TCCGGAAG,AGTTCGGC,CAGCATCA', b'SI-GA-B1'), (b'SI-GA-B2,TACTCTTC,CCTGTGCG,GGACACGT,ATGAGAAA', b'SI-GA-B2'), (b'SI-GA-B3,GTGTATTA,TGTGCGGG,ACCATAAC,CAACGCCT', b'SI-GA-B3'), (b'SI-GA-B4,ACTTCATA,GAGATGAC,TGCCGTGG,CTAGACCT', b'SI-GA-B4'), (b'SI-GA-B5,AATAATGG,CCAGGGCA,TGCCTCAT,GTGTCATC', b'SI-GA-B5'), (b'SI-GA-B6,CGTTAATC,GCCACGCT,TTACTCAG,AAGGGTGA', b'SI-GA-B6'), (b'SI-GA-B7,AAACCTCA,GCCTTGGT,CTGGACTC,TGTAGAAG', b'SI-GA-B7'), (b'SI-GA-B8,AAAGTGCT,GCTACCTG,TGCTGTAA,CTGCAAGC', b'SI-GA-B8'), (b'SI-GA-B9,CTGTAACT,TCTAGCGA,AGAGTGTG,GACCCTAC', b'SI-GA-B9'), (b'SI-GA-B10,ACCGTATG,GATTAGAT,CTGACTGA,TGACGCCC', b'SI-GA-B10'), (b'SI-GA-B11,GTTCCTCA,AGGTACGC,TAAGTATG,CCCAGGAT', b'SI-GA-B11'), (b'SI-GA-B12,TACCACCA,CTAAGTTT,GGGTCAAG,ACTGTGGC', b'SI-GA-B12'), (b'SI-GA-C1,CCACTTAT,AACTGGCG,TTGGCATA,GGTAACGC', b'SI-GA-C1'), (b'SI-GA-C2,CCTAGACC,ATCTCTGT,TAGCTCTA,GGAGAGAG', b'SI-GA-C2'), (b'SI-GA-C3,TCAGCCGT,CAGAGGCC,GGTCAATA,ATCTTTAG', b'SI-GA-C3'), (b'SI-GA-C4,ACAATTCA,TGCGCAGC,CATCACTT,GTGTGGAG', b'SI-GA-C4'), (b'SI-GA-C5,CGACTTGA,TACAGACT,ATTGCGTG,GCGTACAC', b'SI-GA-C5'), (b'SI-GA-C6,ATTACTTC,TGCGAACT,GCATTCGG,CAGCGGAA', b'SI-GA-C6'), (b'SI-GA-C7,GTCTCTCG,AATCTCTC,CGGAGGGA,TCAGAAAT', b'SI-GA-C7'), (b'SI-GA-C8,GTTGAGAA,AGATCTGG,TCGATACT,CACCGCTC', b'SI-GA-C8'), (b'SI-GA-C9,GCGCAGAA,ATCTTACC,TATGGTGT,CGAACCTG', b'SI-GA-C9'), (b'SI-GA-C10,TCTCAGTG,GAGACTAT,CGCTTAGC,ATAGGCCA', b'SI-GA-C10'), (b'SI-GA-C11,GAGGATCT,AGACCATA,TCCTGCGC,CTTATGAG', b'SI-GA-C11'), (b'SI-GA-C12,TCTCGTTT,GGCTAGCG,ATGACCGC,CAAGTAAA', b'SI-GA-C12'), (b'SI-GA-D1,CACTCGGA,GCTGAATT,TGAAGTAC,ATGCTCCG', b'SI-GA-D1'), (b'SI-GA-D2,TAACAAGG,GGTTCCTC,ATCATGCA,CCGGGTAT', b'SI-GA-D2'), (b'SI-GA-D3,ACATTACT,TTTGGGTA,CAGCCCAC,GGCAATGG', b'SI-GA-D3'), (b'SI-GA-D4,CCCTAACA,ATTCCGAT,TGGATTGC,GAAGGCTG', b'SI-GA-D4'), (b'SI-GA-D5,CTCGTCAC,GATCAGCA,ACAACAGG,TGGTGTTT', b'SI-GA-D5'), (b'SI-GA-D6,CATGCGAT,TGATATTC,GTGATCGA,ACCCGACG', b'SI-GA-D6'), (b'SI-GA-D7,ATTTGCTA,TAGACACC,CCACAGGG,GGCGTTAT', b'SI-GA-D7'), (b'SI-GA-D8,GCAACAAA,TAGTTGTC,CGCCATCG,ATTGGCGT', b'SI-GA-D8'), (b'SI-GA-D9,AGGAGATG,GATGTGGT,CTACATCC,TCCTCCAA', b'SI-GA-D9'), (b'SI-GA-D10,CAATACCC,TGTCTATG,ACCACGAA,GTGGGTGT', b'SI-GA-D10'), (b'SI-GA-D11,CTTTGCGG,TGCACAAA,AAGCAGTC,GCAGTTCT', b'SI-GA-D11'), (b'SI-GA-D12,GCACAATG,CTTGGTAC,TGCACCGT,AAGTTGCA', b'SI-GA-D12'), (b'SI-GA-E1,TGGTAAAC,GAAAGGGT,ACTGCTCG,CTCCTCTA', b'SI-GA-E1'), (b'SI-GA-E2,GTGGTACC,TACTATAG,ACAAGGTA,CGTCCCGT', b'SI-GA-E2'), (b'SI-GA-E3,AGGTATTG,CTCCTAGT,TCAAGGCC,GATGCCAA', b'SI-GA-E3'), (b'SI-GA-E4,TTCGCCCT,GGATGGGC,AATCAATG,CCGATTAA', b'SI-GA-E4'), (b'SI-GA-E5,CATTAGCG,TTCGCTGA,ACAAGAAT,GGGCTCTC', b'SI-GA-E5'), (b'SI-GA-E6,CTGCGGCT,GACTCAAA,AGAAACTC,TCTGTTGG', b'SI-GA-E6'), (b'SI-GA-E7,CACGCCTT,GTATATAG,TCTCGGGC,AGGATACA', b'SI-GA-E7'), (b'SI-GA-E8,ATAGTTAC,TGCTGAGT,CCTACGTA,GAGCACCG', b'SI-GA-E8'), (b'SI-GA-E9,TTGTTTCC,GGAGGAGG,CCTAACAA,AACCCGTT', b'SI-GA-E9'), (b'SI-GA-E10,AAATGTGC,GGGCAAAT,TCTATCCG,CTCGCGTA', b'SI-GA-E10'), (b'SI-GA-E11,AAGCGCTG,CGTTTGAT,GTAGCACA,TCCAATGC', b'SI-GA-E11'), (b'SI-GA-E12,ACCGGCTC,GAGTTAGT,CGTCCTAG,TTAAAGCA', b'SI-GA-E12'), (b'SI-GA-F1,GTTGCAGC,TGGAATTA,CAATGGAG,ACCCTCCT', b'SI-GA-F1'), (b'SI-GA-F2,TTTACATG,CGCGATAC,ACGCGGGT,GAATTCCA', b'SI-GA-F2'), (b'SI-GA-F3,TTCAGGTG,ACGGACAT,GATCTTGA,CGATCACC', b'SI-GA-F3'), (b'SI-GA-F4,CCCAATAG,GTGTCGCT,AGAGTCGC,TATCGATA', b'SI-GA-F4'), (b'SI-GA-F5,GACTACGT,CTAGCGAG,TCTATATC,AGGCGTCA', b'SI-GA-F5'), (b'SI-GA-F6,CGGAGCAC,GACCTATT,ACTTAGGA,TTAGCTCG', b'SI-GA-F6'), (b'SI-GA-F7,CGTGCAGA,AACAAGAT,TCGCTTCG,GTATGCTC', b'SI-GA-F7'), (b'SI-GA-F8,CATGAACA,TCACTCGC,AGCTGGAT,GTGACTTG', b'SI-GA-F8'), (b'SI-GA-F9,CAAGCTCC,GTTCACTG,TCGTGAAA,AGCATGGT', b'SI-GA-F9'), (b'SI-GA-F10,GCTTGGCT,AAACAAAC,CGGGCTTA,TTCATCGG', b'SI-GA-F10'), (b'SI-GA-F11,GCGAGAGT,TACGTTCA,AGTCCCAC,CTATAGTG', b'SI-GA-F11'), (b'SI-GA-F12,TGATGCAT,GCTACTGA,CACCTGCC,ATGGAATG', b'SI-GA-F12'), (b'SI-GA-G1,ATGAATCT,GATCTCAG,CCAGGAGC,TGCTCGTA', b'SI-GA-G1'), (b'SI-GA-G2,TGATTCTA,ACTAGGAG,CAGCCACT,GTCGATGC', b'SI-GA-G2'), (b'SI-GA-G3,CCTCATTC,AGCATCCG,GTGGCAAT,TAATGGGA', b'SI-GA-G3'), (b'SI-GA-G4,GCGATGTG,AGATACAA,TTTCCACT,CACGGTGC', b'SI-GA-G4'), (b'SI-GA-G5,GAGCAAGA,TCTGTGAT,CGCAGTTC,ATATCCCG', b'SI-GA-G5'), (b'SI-GA-G6,CTGACGCG,GGTCGTAC,TCCTTCTT,AAAGAAGA', b'SI-GA-G6'), (b'SI-GA-G7,GGTATGCA,CTCGAAAT,ACACCTTC,TAGTGCGG', b'SI-GA-G7'), (b'SI-GA-G8,TATGAGCT,CCGATAGC,ATACCCAA,GGCTGTTG', b'SI-GA-G8'), (b'SI-GA-G9,TAGGACGT,ATCCCACA,GGAATGTC,CCTTGTAG', b'SI-GA-G9'), (b'SI-GA-G10,TCGCCAGC,AATGTTAG,CGATAGCT,GTCAGCTA', b'SI-GA-G10'), (b'SI-GA-G11,TTATCGTT,AGCAGAGC,CATCTCCA,GCGGATAG', b'SI-GA-G11'), (b'SI-GA-G12,ATTCTAAG,CCCGATTA,TGGAGGCT,GAATCCGC', b'SI-GA-G12'), (b'SI-GA-H1,GTATGTCA,TGTCAGAC,CACGTCGG,ACGACATT', b'SI-GA-H1'), (b'SI-GA-H2,TAATGACC,ATGCCTTA,GCCGAGAT,CGTATCGG', b'SI-GA-H2'), (b'SI-GA-H3,CCAAGATG,AGGCCCGA,TACGTGAC,GTTTATCT', b'SI-GA-H3'), (b'SI-GA-H4,GCCATTCC,CAAGAATT,TTGCCGGA,AGTTGCAG', b'SI-GA-H4'), (b'SI-GA-H5,CCACTACA,GATTCTGG,TGCGGCTT,ATGAAGAC', b'SI-GA-H5'), (b'SI-GA-H6,TAGGATAA,CCTTTGTC,GTACGCGG,AGCACACT', b'SI-GA-H6'), (b'SI-GA-H7,AGCTATCA,CATATAAC,TCAGGGTG,GTGCCCGT', b'SI-GA-H7'), (b'SI-GA-H8,TTGTTGAT,GCTCAACC,CAAAGTGG,AGCGCCTA', b'SI-GA-H8'), (b'SI-GA-H9,ACACTGTT,CAGGATGG,GGCTGAAC,TTTACCCA', b'SI-GA-H9'), (b'SI-GA-H10,GTAATTGC,AGTCGCTT,CACGAGAA,TCGTCACG', b'SI-GA-H10'), (b'SI-GA-H11,GGCGAGTA,ACTTCTAT,CAAATACG,TTGCGCGC', b'SI-GA-H11'), (b'SI-GA-H12,GACAGCAT,TTTGTACA,AGGCCGTG,CCATATGC', b'SI-GA-H12')], max_length=150, null=True, verbose_name='Index used'),
        ),
        migrations.AddField(
            model_name='tenxlibraryconstructioninformation',
            name='pool',
            field=models.CharField(blank=True, max_length=150, null=True, verbose_name='Pool'),
        ),
        migrations.AddField(
            model_name='tenxlibraryconstructioninformation',
            name='reagent_lot_number',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Reagent lot number'),
        ),
        migrations.AddField(
            model_name='tenxlibraryquantificationandstorage',
            name='agilent_bioanalyzer_image',
            field=models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_tenx_library_path, verbose_name='Agilent bioanalyzer image file'),
        ),
        migrations.AddField(
            model_name='tenxlibraryquantificationandstorage',
            name='agilent_bioanalyzer_xad',
            field=models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_tenx_library_path, verbose_name='Agilent bioanalyzer xad file'),
        ),
        migrations.AddField(
            model_name='tenxlibrarysampledetail',
            name='num_cells_targeted',
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of cells targeted'),
        ),
        migrations.AddField(
            model_name='tenxlibrarysampledetail',
            name='num_conditions',
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of conditions'),
        ),
        migrations.AlterField(
            model_name='tenxlibraryconstructioninformation',
            name='library_type',
            field=models.CharField(blank=True, choices=[(b"5'", b"5'"), (b"3'", b"3'"), (b'V(D)J', b'V(D)J')], max_length=20, null=True, verbose_name='Library type'),
        ),
    ]
